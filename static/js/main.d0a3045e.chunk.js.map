{"version":3,"sources":["../node_modules/sentiment/languages sync /^/.*/index$","images/YouTube_Logo_2017.svg","images/light-bulb.png","App.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","sentiment","Sentiment","App","useState","sentimentScore","setSentimentScore","generalSentiment","setGeneralSentiment","videoId","setVideoId","text","setText","fetchEvents","a","fetch","res","json","toString","data","alert","comment","items","snippet","topLevelComment","textDisplay","className","src","logo","alt","trigger","icon","position","contentStyle","arrowStyle","onChange","target","value","placeholder","type","onClick","result","analyze","score","ReactDOM","render","document","getElementById"],"mappings":"6JAAA,IAAIA,EAAM,CACT,aAAc,GAIf,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,wHCtBL,MAA0B,8CCA1B,MAA0B,uC,sBCOnCY,EAAY,IAAIC,IAwGPC,EArGH,WACV,MAA4CC,mBAAS,GAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAgDF,mBAAS,WAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwBN,mBAAS,IAAjC,mBAAOO,EAAP,KAAaC,EAAb,KAEMC,EAAW,uCAAG,8BAAAC,EAAA,0DACdL,EADc,iCAEEM,MAAM,4DAAD,OAVb,0CAUa,sDAC4FN,EAD5F,oBAFP,cAEVO,EAFU,gBAKGA,EAAIC,KAAKC,YALZ,OAKVC,EALU,OAMhBP,EAAQO,GANQ,wBAQhBC,MAAM,kCARU,4CAAH,qDAYbC,EAAU,GASd,OARIV,IACFU,EAAUV,EAAKW,MAAMpC,KAAI,SAACO,GACxB,OAAOA,EAAE8B,QAAQC,gBAAgBD,QAAQE,gBAO3C,sBAAKC,UAAU,MAAf,UACE,qBAAKC,IAAKC,EAAMC,IAAI,eAAeH,UAAU,YAC7C,qBAAKA,UAAU,SAAf,SACE,cAAC,IAAD,CACEI,QACE,sBAAKJ,UAAU,OAAf,UACE,qBAAKC,IAAKI,EAAMF,IAAI,YAAYxC,GAAG,WACnC,4DACA,qBAAKsC,IAAKI,EAAMF,IAAI,YAAYxC,GAAG,cAGvC2C,SAAS,gBARX,SAUE,oBAAGC,aAAa,gBAAgBC,WAAW,cAA3C,sMAIE,mDACA,6LAQN,wFACA,uBACEC,SAAU,SAAC1C,GAAD,OAAOiB,EAAWjB,EAAE2C,OAAOC,QACrCX,UAAU,QACVY,YAAY,uBAEd,wBAAQC,KAAK,SAASC,QAAS3B,EAA/B,0BAGA,mBAAGa,UAAU,QAAb,wEAGA,0BACEW,MAAOhB,EACPmB,QAAS,SAAC/C,GACR,IAAMgD,EAASxC,EAAUyC,QAAQjD,EAAE2C,OAAOC,OAC1C/B,EAAkBmC,EAAOE,OACrBF,EAAOE,MAAQ,GACjBnC,EAAoB,YAElBiC,EAAOE,MAAQ,GACjBnC,EAAoB,YAED,IAAjBiC,EAAOE,OACTnC,EAAoB,cAI1B,sBAAKkB,UAAU,aAAf,UACE,oBAAGA,UAAU,UAAb,UACE,sBAAMA,UAAU,OAAhB,+BACA,sBAAMA,UAAU,QAAhB,SAAyBrB,OAE3B,oBAAGqB,UAAU,UAAb,UACE,sBAAMA,UAAU,OAAhB,iCACA,sBAAMA,UAAU,QAAhB,SAAyBnB,UAG7B,qBAAKmB,UAAU,SAAf,SACE,yDACyB,8DCnGjCkB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.d0a3045e.chunk.js","sourcesContent":["var map = {\n\t\"./en/index\": 6\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 23;","export default __webpack_public_path__ + \"static/media/YouTube_Logo_2017.550cda84.svg\";","export default __webpack_public_path__ + \"static/media/light-bulb.fc90eb9e.png\";","import React, { useState } from \"react\";\nimport Sentiment from \"sentiment\";\nimport logo from \"./images/YouTube_Logo_2017.svg\";\nimport icon from \"./images/light-bulb.png\";\nimport Popup from \"reactjs-popup\";\nimport \"reactjs-popup/dist/index.css\";\n\nconst sentiment = new Sentiment();\nconst API_KEY = \"AIzaSyCOwY8388De03qcCZr_vMOPCaRtEvDI7eo\";\n\nconst App = () => {\n  const [sentimentScore, setSentimentScore] = useState(0);\n  const [generalSentiment, setGeneralSentiment] = useState(\"Neutral\");\n  const [videoId, setVideoId] = useState(\"\");\n  const [text, setText] = useState(\"\");\n\n  const fetchEvents = async () => {\n    if (videoId) {\n      const res = await fetch(\n        `https://www.googleapis.com/youtube/v3/commentThreads?key=${API_KEY}&textFormat=plainText&part=snippet&videoId=${videoId}&maxResults=100`\n      );\n      const data = await res.json(toString());\n      setText(data);\n    } else {\n      alert(\"Please enter a valid Video-Id!\");\n    }\n  };\n\n  var comment = \"\";\n  if (text) {\n    comment = text.items.map((e) => {\n      return e.snippet.topLevelComment.snippet.textDisplay;\n    });\n  } else {\n    <h1>Loading!...</h1>;\n  }\n\n  return (\n    <div className=\"app\">\n      <img src={logo} alt=\"YouTube Logo\" className=\"yt-logo\" />\n      <div className=\"pop-up\">\n        <Popup\n          trigger={\n            <div className=\"head\">\n              <img src={icon} alt=\"Know More\" id=\"popup1\" />\n              <h1>Comment Sentiment Analysis</h1>\n              <img src={icon} alt=\"Know More\" id=\"popup2\" />\n            </div>\n          }\n          position=\"bottom center\"\n        >\n          <p contentStyle=\"popup-content\" arrowStyle=\"popup-arrow\">\n            This is a comment sentiment analysis app, which gives you a\n            sentiment score and a general sentiment of the 100 initial comments\n            on a YouTube video, just by giving your desired Video-Id.\n            <h2>What is Video-Id?</h2>\n            <p>\n              \"https://www.youtube.com/watch?v=UKdQjQX1Pko\", in the YouTube Link\n              provided the part UKdQjQX1Pko is the Video-Id and it is different\n              for every video.\n            </p>\n          </p>\n        </Popup>\n      </div>\n      <p>Enter Video-Id to get the real-time sentiment analysis:</p>\n      <input\n        onChange={(e) => setVideoId(e.target.value)}\n        className=\"input\"\n        placeholder=\"Enter the Video-Id\"\n      ></input>\n      <button type=\"button\" onClick={fetchEvents}>\n        Get Analysis\n      </button>\n      <p className=\"click\">\n        Click on the text to get the real-time sentiment analysis:\n      </p>\n      <textarea\n        value={comment}\n        onClick={(e) => {\n          const result = sentiment.analyze(e.target.value);\n          setSentimentScore(result.score);\n          if (result.score < 0) {\n            setGeneralSentiment(\"Negative\");\n          }\n          if (result.score > 0) {\n            setGeneralSentiment(\"Positive\");\n          }\n          if (result.score === 0) {\n            setGeneralSentiment(\"Neutral\");\n          }\n        }}\n      ></textarea>\n      <div className=\"score-part\">\n        <p className=\"score-p\">\n          <span className=\"left\">Sentiment Score: </span>\n          <span className=\"score\">{sentimentScore}</span>\n        </p>\n        <p className=\"score-p\">\n          <span className=\"left\">General Sentiment: </span>\n          <span className=\"score\">{generalSentiment}</span>\n        </p>\n      </div>\n      <div className=\"footer\">\n        <h2>\n          Developed with love by <span>Gyananshu Kashyap</span>\n        </h2>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}